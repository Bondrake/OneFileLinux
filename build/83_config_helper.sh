#!/bin/bash
#
# OneRecovery Configuration Helper (83_config_helper.sh)
# Provides configuration utilities, option parsing, and config file management
# This is part of the library scripts (80-89 range)
#

# Color codes for better visibility (fallback if not defined in common)
if [ -z "$RED" ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
fi

# Configuration file loading
load_config() {
    local config_file=${1:-"./build.conf"}
    
    if [ -f "$config_file" ]; then
        log "INFO" "Loading configuration from $config_file"
        source "$config_file"
        return 0
    else
        log "INFO" "No configuration file found: $config_file"
        return 1
    fi
}

# Configuration file saving
save_config() {
    local config_file=${1:-"./build.conf"}
    
    log "INFO" "Saving configuration to $config_file"
    cat > "$config_file" << EOF
# OneRecovery build configuration
# Generated by build.sh on $(date)

# Optional components
INCLUDE_ZFS=${INCLUDE_ZFS:-true}
INCLUDE_BTRFS=${INCLUDE_BTRFS:-false}
INCLUDE_RECOVERY_TOOLS=${INCLUDE_RECOVERY_TOOLS:-true}
INCLUDE_NETWORK_TOOLS=${INCLUDE_NETWORK_TOOLS:-true}
INCLUDE_CRYPTO=${INCLUDE_CRYPTO:-true}
INCLUDE_TUI=${INCLUDE_TUI:-true}
INCLUDE_MINIMAL_KERNEL=${INCLUDE_MINIMAL_KERNEL:-false}
INCLUDE_COMPRESSION=${INCLUDE_COMPRESSION:-true}
COMPRESSION_TOOL="${COMPRESSION_TOOL:-upx}"

# Build performance options
USE_CACHE=${USE_CACHE:-true}
CACHE_DIR="${CACHE_DIR:-$HOME/.onerecovery/cache}"
BUILD_JOBS=${BUILD_JOBS:-$(getconf _NPROCESSORS_ONLN)}
KEEP_CCACHE=${KEEP_CCACHE:-true}
USE_SWAP=${USE_SWAP:-false}
INTERACTIVE_CONFIG=${INTERACTIVE_CONFIG:-false}

# Customization options
CUSTOM_KERNEL_CONFIG="${CUSTOM_KERNEL_CONFIG:-}"
EXTRA_PACKAGES="${EXTRA_PACKAGES:-}"

# Advanced package groups
INCLUDE_ADVANCED_FS=${INCLUDE_ADVANCED_FS:-false}
INCLUDE_DISK_DIAG=${INCLUDE_DISK_DIAG:-false}
INCLUDE_NETWORK_DIAG=${INCLUDE_NETWORK_DIAG:-false}
INCLUDE_SYSTEM_TOOLS=${INCLUDE_SYSTEM_TOOLS:-false}
INCLUDE_DATA_RECOVERY=${INCLUDE_DATA_RECOVERY:-false}
INCLUDE_BOOT_REPAIR=${INCLUDE_BOOT_REPAIR:-false}
INCLUDE_EDITORS=${INCLUDE_EDITORS:-false}
INCLUDE_SECURITY=${INCLUDE_SECURITY:-false}

# Security options
GENERATE_RANDOM_PASSWORD=${GENERATE_RANDOM_PASSWORD:-true}
ROOT_PASSWORD_LENGTH=${ROOT_PASSWORD_LENGTH:-12}
EOF
    log "SUCCESS" "Configuration saved successfully to $config_file"
    return 0
}

# Convert boolean to Yes/No string with colors
bool_to_str() {
    if [ "$1" = "true" ]; then
        echo -e "${GREEN}Yes${NC}"
    else
        echo -e "${RED}No${NC}"
    fi
}

# Print current configuration
print_config() {
    log "INFO" "Current build configuration:"
    
    # Build type
    if [ "${INCLUDE_MINIMAL_KERNEL:-false}" = "true" ]; then
        log "INFO" "  Build type: ${YELLOW}Minimal${NC} (optimized for size)"
    else
        log "INFO" "  Build type: ${GREEN}Standard${NC}"
    fi
    
    # Core components
    log "INFO" "  ZFS support: $(bool_to_str ${INCLUDE_ZFS:-true})"
    log "INFO" "  Btrfs support: $(bool_to_str ${INCLUDE_BTRFS:-false})"
    log "INFO" "  Recovery tools: $(bool_to_str ${INCLUDE_RECOVERY_TOOLS:-true})"
    log "INFO" "  Network tools: $(bool_to_str ${INCLUDE_NETWORK_TOOLS:-true})"
    log "INFO" "  Crypto support: $(bool_to_str ${INCLUDE_CRYPTO:-true})"
    log "INFO" "  Text User Interface: $(bool_to_str ${INCLUDE_TUI:-true})"
    
    # Display compression information
    if [ "${INCLUDE_COMPRESSION:-true}" = "true" ]; then
        log "INFO" "  EFI Compression: ${GREEN}Yes${NC} (using ${COMPRESSION_TOOL:-upx})"
    else
        log "INFO" "  EFI Compression: ${RED}No${NC}"
    fi
    
    # Display build performance settings
    log "INFO" ""
    log "INFO" "Build performance settings:"
    log "INFO" "  Source caching: $(bool_to_str ${USE_CACHE:-true})"
    if [ "${USE_CACHE:-true}" = "true" ]; then
        log "INFO" "  Cache directory: ${CACHE_DIR:-$HOME/.onerecovery/cache}"
    fi
    log "INFO" "  Parallel jobs: ${GREEN}${BUILD_JOBS:-$(getconf _NPROCESSORS_ONLN)}${NC}"
    log "INFO" "  Keep ccache: $(bool_to_str ${KEEP_CCACHE:-true})"
    log "INFO" "  Use swap file: $(bool_to_str ${USE_SWAP:-false})"
    log "INFO" "  Interactive kernel config: $(bool_to_str ${INTERACTIVE_CONFIG:-false})"
    
    # Display customization settings
    log "INFO" ""
    log "INFO" "Customization settings:"
    if [ -n "${CUSTOM_KERNEL_CONFIG:-}" ]; then
        log "INFO" "  Custom kernel config: ${GREEN}${CUSTOM_KERNEL_CONFIG}${NC}"
    else
        log "INFO" "  Kernel config: ${BLUE}Default${NC}"
    fi
    if [ -n "${EXTRA_PACKAGES:-}" ]; then
        log "INFO" "  Extra packages: ${GREEN}${EXTRA_PACKAGES}${NC}"
    else
        log "INFO" "  Extra packages: ${BLUE}None${NC}"
    fi
    
    # Display advanced package groups
    log "INFO" ""
    log "INFO" "Advanced package groups:"
    log "INFO" "  Advanced filesystem tools: $(bool_to_str ${INCLUDE_ADVANCED_FS:-false})"
    log "INFO" "  Disk & hardware diagnostics: $(bool_to_str ${INCLUDE_DISK_DIAG:-false})"
    log "INFO" "  Network diagnostics & VPN: $(bool_to_str ${INCLUDE_NETWORK_DIAG:-false})"
    log "INFO" "  Advanced system tools: $(bool_to_str ${INCLUDE_SYSTEM_TOOLS:-false})"
    log "INFO" "  Data recovery utilities: $(bool_to_str ${INCLUDE_DATA_RECOVERY:-false})"
    log "INFO" "  Boot repair tools: $(bool_to_str ${INCLUDE_BOOT_REPAIR:-false})"
    log "INFO" "  Advanced text editors: $(bool_to_str ${INCLUDE_EDITORS:-false})"
    log "INFO" "  Security tools: $(bool_to_str ${INCLUDE_SECURITY:-false})"
    
    # Display security settings
    log "INFO" ""
    log "INFO" "Security settings:"
    if [ "${GENERATE_RANDOM_PASSWORD:-true}" = "true" ]; then
        log "INFO" "  Root password: ${GREEN}Generate random password${NC} (length: ${ROOT_PASSWORD_LENGTH:-12})"
    elif [ -n "${ROOT_PASSWORD:-}" ]; then
        log "INFO" "  Root password: ${GREEN}Custom password provided${NC}"
    else
        log "INFO" "  Root password: ${RED}None${NC} (unsafe)"
    fi
}

# Generate module configuration environment variables
generate_module_env() {
    local env_vars=""
    
    # Set environment variables for each module
    env_vars+="export INCLUDE_ZFS=${INCLUDE_ZFS:-true} "
    env_vars+="export INCLUDE_BTRFS=${INCLUDE_BTRFS:-false} "
    env_vars+="export INCLUDE_RECOVERY_TOOLS=${INCLUDE_RECOVERY_TOOLS:-true} "
    env_vars+="export INCLUDE_NETWORK_TOOLS=${INCLUDE_NETWORK_TOOLS:-true} "
    env_vars+="export INCLUDE_CRYPTO=${INCLUDE_CRYPTO:-true} "
    env_vars+="export INCLUDE_TUI=${INCLUDE_TUI:-true} "
    env_vars+="export INCLUDE_MINIMAL_KERNEL=${INCLUDE_MINIMAL_KERNEL:-false} "
    env_vars+="export INCLUDE_COMPRESSION=${INCLUDE_COMPRESSION:-true} "
    env_vars+="export COMPRESSION_TOOL=${COMPRESSION_TOOL:-upx} "
    
    # Set build performance variables
    env_vars+="export USE_CACHE=${USE_CACHE:-true} "
    env_vars+="export CACHE_DIR=${CACHE_DIR:-$HOME/.onerecovery/cache} "
    env_vars+="export BUILD_JOBS=${BUILD_JOBS:-$(getconf _NPROCESSORS_ONLN)} "
    env_vars+="export KEEP_CCACHE=${KEEP_CCACHE:-true} "
    env_vars+="export USE_SWAP=${USE_SWAP:-false} "
    env_vars+="export INTERACTIVE_CONFIG=${INTERACTIVE_CONFIG:-false} "
    
    # Set customization variables
    env_vars+="export CUSTOM_KERNEL_CONFIG=\"${CUSTOM_KERNEL_CONFIG:-}\" "
    env_vars+="export EXTRA_PACKAGES=\"${EXTRA_PACKAGES:-}\" "
    
    # Set advanced package groups
    env_vars+="export INCLUDE_ADVANCED_FS=${INCLUDE_ADVANCED_FS:-false} "
    env_vars+="export INCLUDE_DISK_DIAG=${INCLUDE_DISK_DIAG:-false} "
    env_vars+="export INCLUDE_NETWORK_DIAG=${INCLUDE_NETWORK_DIAG:-false} "
    env_vars+="export INCLUDE_SYSTEM_TOOLS=${INCLUDE_SYSTEM_TOOLS:-false} "
    env_vars+="export INCLUDE_DATA_RECOVERY=${INCLUDE_DATA_RECOVERY:-false} "
    env_vars+="export INCLUDE_BOOT_REPAIR=${INCLUDE_BOOT_REPAIR:-false} "
    env_vars+="export INCLUDE_EDITORS=${INCLUDE_EDITORS:-false} "
    env_vars+="export INCLUDE_SECURITY=${INCLUDE_SECURITY:-false} "
    
    # Set security variables
    env_vars+="export ROOT_PASSWORD=\"${ROOT_PASSWORD:-}\" "
    env_vars+="export GENERATE_RANDOM_PASSWORD=${GENERATE_RANDOM_PASSWORD:-true} "
    env_vars+="export ROOT_PASSWORD_LENGTH=${ROOT_PASSWORD_LENGTH:-12} "
    
    # Set ccache variables if enabled
    if [ "${USE_CACHE:-true}" = "true" ] && command -v ccache &> /dev/null; then
        env_vars+="export CCACHE_DIR=${CACHE_DIR:-$HOME/.onerecovery/cache}/ccache "
        env_vars+="export PATH=/usr/lib/ccache:\$PATH "
    fi
    
    echo "$env_vars"
}

# Setup cache directories
setup_cache() {
    if [ "${USE_CACHE:-true}" = "true" ]; then
        log "INFO" "Setting up cache directory: ${CACHE_DIR:-$HOME/.onerecovery/cache}"
        
        # Create cache directories
        mkdir -p "${CACHE_DIR:-$HOME/.onerecovery/cache}/sources"
        mkdir -p "${CACHE_DIR:-$HOME/.onerecovery/cache}/ccache"
        mkdir -p "${CACHE_DIR:-$HOME/.onerecovery/cache}/packages"
        
        # Set up ccache if available
        if command -v ccache &> /dev/null; then
            export CCACHE_DIR="${CACHE_DIR:-$HOME/.onerecovery/cache}/ccache"
            export PATH="/usr/lib/ccache:$PATH"
            log "INFO" "Compiler cache enabled: $CCACHE_DIR"
            
            # Set ccache limits
            ccache -M 5G  # Set max cache size to 5GB
            ccache -z     # Zero statistics
            
            return 0
        else
            log "WARNING" "ccache not found. Install ccache for faster rebuilds."
            return 1
        fi
    else
        log "INFO" "Caching disabled"
        return 0
    fi
}

# Export all functions
export -f load_config
export -f save_config
export -f bool_to_str
export -f print_config
export -f generate_module_env
export -f setup_cache