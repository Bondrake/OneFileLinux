#!/bin/bash
#
# OneRecovery unified build script
# Runs the entire build process with a single command
#

# Default settings
CLEAN_START=false
VERBOSE=false
SKIP_PREPARE=false
RESUME=false
CLEAN_END=false
BUILD_STEP=""

# Optional components
INCLUDE_ZFS=true
INCLUDE_BTRFS=false
INCLUDE_RECOVERY_TOOLS=true
INCLUDE_NETWORK_TOOLS=true
INCLUDE_CRYPTO=true
INCLUDE_TUI=true
INCLUDE_MINIMAL_KERNEL=false
INCLUDE_COMPRESSION=true
COMPRESSION_TOOL="upx"  # Options: upx, xz, zstd

# Define config file location
CONFIG_FILE="./build.conf"

# Define script name for error handling
SCRIPT_NAME=$(basename "$0")

# Source common error handling if available
if [ -f "./error_handling.sh" ]; then
    source ./error_handling.sh
else
    # Minimal error handling if the file is not available
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
    
    log() {
        local level=$1
        local message=$2
        case "$level" in
            "INFO") echo -e "${BLUE}[INFO]${NC} $message" ;;
            "WARNING") echo -e "${YELLOW}[WARNING]${NC} $message" ;;
            "ERROR") echo -e "${RED}[ERROR]${NC} $message" ;;
            "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $message" ;;
            *) echo -e "$message" ;;
        esac
    }
    
    print_banner() {
        echo -e "${BLUE}"
        echo "      ____________  "
        echo "    /|------------| "
        echo "   /_|  .---.     | "
        echo "  |    /     \    | "
        echo "  |    \.6-6./    | "
        echo "  |    /\`\_/\`\    | "
        echo "  |   //  _  \\\   | "
        echo "  |  | \     / |  | "
        echo "  | /\`\_\`>  <_/\`\ | "
        echo "  | \__/'---'\__/ | "
        echo "  |_______________| "
        echo "                    "
        echo -e "${GREEN}   OneRecovery Builder  ${NC}"
        echo "----------------------------------------------------"
    }
    
    trap 'echo -e "${RED}[ERROR]${NC} An error occurred at line $LINENO. Command: $BASH_COMMAND"; exit 1' ERR
    set -e
fi

# Display usage information
usage() {
    echo "Usage: $0 [options] [STEP]"
    echo ""
    echo "Options:"
    echo "  -h, --help          Display this help message"
    echo "  -c, --clean-start   Run cleanup script before starting (removes previous builds)"
    echo "  -v, --verbose       Enable verbose output"
    echo "  -s, --skip-prepare  Skip environment preparation step"
    echo "  -r, --resume        Resume from last successful step (if possible)"
    echo "  -C, --clean-end     Run cleanup script after successful build"
    echo ""
    echo "Steps:"
    echo "  all                 Run all build steps (default)"
    echo "  prepare             Run only environment preparation (00_prepare.sh)"
    echo "  get                 Run through downloading sources (01_get.sh)"
    echo "  chroot              Run through chroot and install (02_chrootandinstall.sh)"
    echo "  conf                Run through configuration (03_conf.sh)"
    echo "  build               Run only the build step (04_build.sh)"
    echo "  clean               Run only cleanup (99_cleanup.sh)"
    echo ""
    echo "Examples:"
    echo "  $0                  Run all build steps"
    echo "  $0 -c all           Clean, then run all build steps"
    echo "  $0 -r               Resume build from last successful step"
    echo "  $0 get              Run only the download step"
    echo "  $0 -s build         Skip environment preparation and run only the build step"
    echo ""
}

# Load configuration from file
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        log "INFO" "Loading configuration from $CONFIG_FILE"
        source "$CONFIG_FILE"
        log "SUCCESS" "Configuration loaded successfully"
    else
        log "INFO" "No configuration file found, using defaults"
    fi
}

# Save configuration to file
save_config() {
    log "INFO" "Saving configuration to $CONFIG_FILE"
    cat > "$CONFIG_FILE" << EOF
# OneRecovery build configuration
# Generated by build.sh on $(date)

# Optional components
INCLUDE_ZFS=$INCLUDE_ZFS
INCLUDE_BTRFS=$INCLUDE_BTRFS
INCLUDE_RECOVERY_TOOLS=$INCLUDE_RECOVERY_TOOLS
INCLUDE_NETWORK_TOOLS=$INCLUDE_NETWORK_TOOLS
INCLUDE_CRYPTO=$INCLUDE_CRYPTO
INCLUDE_TUI=$INCLUDE_TUI
INCLUDE_MINIMAL_KERNEL=$INCLUDE_MINIMAL_KERNEL
INCLUDE_COMPRESSION=$INCLUDE_COMPRESSION
COMPRESSION_TOOL="$COMPRESSION_TOOL"
EOF
    log "SUCCESS" "Configuration saved successfully"
}

# Print current configuration
print_config() {
    log "INFO" "Current build configuration:"
    if [ "$INCLUDE_MINIMAL_KERNEL" = "true" ]; then
        log "INFO" "  Build type: ${YELLOW}Minimal${NC} (optimized for size)"
    else
        log "INFO" "  Build type: ${GREEN}Standard${NC}"
    fi
    log "INFO" "  ZFS support: $(bool_to_str $INCLUDE_ZFS)"
    log "INFO" "  Btrfs support: $(bool_to_str $INCLUDE_BTRFS)"
    log "INFO" "  Recovery tools: $(bool_to_str $INCLUDE_RECOVERY_TOOLS)"
    log "INFO" "  Network tools: $(bool_to_str $INCLUDE_NETWORK_TOOLS)"
    log "INFO" "  Crypto support: $(bool_to_str $INCLUDE_CRYPTO)"
    log "INFO" "  Text User Interface: $(bool_to_str $INCLUDE_TUI)"
    
    # Display compression information
    if [ "$INCLUDE_COMPRESSION" = "true" ]; then
        log "INFO" "  EFI Compression: ${GREEN}Yes${NC} (using ${COMPRESSION_TOOL})"
    else
        log "INFO" "  EFI Compression: ${RED}No${NC}"
    fi
}

# Convert boolean to Yes/No string
bool_to_str() {
    if [ "$1" = true ]; then
        echo -e "${GREEN}Yes${NC}"
    else
        echo -e "${RED}No${NC}"
    fi
}

# Print extended usage information
usage_modules() {
    echo ""
    echo "Build Options:"
    echo "  --minimal              Minimal build optimized for size (~30-50% smaller)"
    echo "  --full                 Full build with all available components"
    echo ""
    echo "Size Optimization Options:"
    echo "  --with-compression     Enable EFI file compression (default: yes)"
    echo "  --without-compression  Disable EFI file compression (faster boot)"
    echo "  --compression-tool=TOOL Select compression tool (upx, xz, zstd) (default: upx)"
    echo ""
    echo "Optional Modules:"
    echo "  --with-zfs             Include ZFS filesystem support (default: yes)"
    echo "  --without-zfs          Exclude ZFS filesystem support"
    echo "  --with-btrfs           Include Btrfs filesystem support (default: no)"
    echo "  --without-btrfs        Exclude Btrfs filesystem support"
    echo "  --with-recovery-tools  Include data recovery tools (default: yes)"
    echo "  --without-recovery-tools  Exclude data recovery tools"
    echo "  --with-network-tools   Include network tools (default: yes)"
    echo "  --without-network-tools  Exclude network tools"
    echo "  --with-crypto          Include encryption support (default: yes)"
    echo "  --without-crypto       Exclude encryption support"
    echo "  --with-tui             Include Text User Interface (default: yes)"
    echo "  --without-tui          Exclude Text User Interface"
    echo ""
    echo "Configuration Management:"
    echo "  --save-config          Save current configuration as default"
    echo "  --show-config          Display current build configuration"
    echo ""
    echo "Examples:"
    echo "  $0 --without-zfs        Build without ZFS support"
    echo "  $0 --minimal            Build with minimal components only"
    echo "  $0 --with-btrfs --without-crypto  Custom component selection"
    echo "  $0 --compression-tool=zstd  Use ZSTD for compression instead of UPX"
    echo "  $0 --minimal --compression-tool=xz  Minimal build with highest compression"
    echo "  $0 --without-compression  Disable compression for faster boot time"
    echo ""
}

# Process command line arguments
process_args() {
    # First load config file if it exists
    load_config
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                usage_modules
                exit 0
                ;;
            -c|--clean-start)
                CLEAN_START=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -s|--skip-prepare)
                SKIP_PREPARE=true
                shift
                ;;
            -r|--resume)
                RESUME=true
                shift
                ;;
            -C|--clean-end)
                CLEAN_END=true
                shift
                ;;
            --with-zfs)
                INCLUDE_ZFS=true
                shift
                ;;
            --without-zfs)
                INCLUDE_ZFS=false
                shift
                ;;
            --with-btrfs)
                INCLUDE_BTRFS=true
                shift
                ;;
            --without-btrfs)
                INCLUDE_BTRFS=false
                shift
                ;;
            --with-recovery-tools)
                INCLUDE_RECOVERY_TOOLS=true
                shift
                ;;
            --without-recovery-tools)
                INCLUDE_RECOVERY_TOOLS=false
                shift
                ;;
            --with-network-tools)
                INCLUDE_NETWORK_TOOLS=true
                shift
                ;;
            --without-network-tools)
                INCLUDE_NETWORK_TOOLS=false
                shift
                ;;
            --with-crypto)
                INCLUDE_CRYPTO=true
                shift
                ;;
            --without-crypto)
                INCLUDE_CRYPTO=false
                shift
                ;;
            --with-tui)
                INCLUDE_TUI=true
                shift
                ;;
            --without-tui)
                INCLUDE_TUI=false
                shift
                ;;
            --with-compression)
                INCLUDE_COMPRESSION=true
                shift
                ;;
            --without-compression)
                INCLUDE_COMPRESSION=false
                shift
                ;;
            --compression-tool=*)
                COMPRESSION_TOOL="${1#*=}"
                # Validate that the tool is one of the allowed options
                if [[ "$COMPRESSION_TOOL" != "upx" && "$COMPRESSION_TOOL" != "xz" && "$COMPRESSION_TOOL" != "zstd" ]]; then
                    log "ERROR" "Invalid compression tool: $COMPRESSION_TOOL. Allowed values: upx, xz, zstd"
                    exit 1
                fi
                shift
                ;;
            --minimal)
                INCLUDE_ZFS=false
                INCLUDE_BTRFS=false
                INCLUDE_RECOVERY_TOOLS=false
                INCLUDE_NETWORK_TOOLS=false
                INCLUDE_CRYPTO=false
                INCLUDE_TUI=false
                INCLUDE_MINIMAL_KERNEL=true
                shift
                ;;
            --full)
                INCLUDE_ZFS=true
                INCLUDE_BTRFS=true
                INCLUDE_RECOVERY_TOOLS=true
                INCLUDE_NETWORK_TOOLS=true
                INCLUDE_CRYPTO=true
                INCLUDE_TUI=true
                shift
                ;;
            --save-config)
                save_config
                exit 0
                ;;
            --show-config)
                print_config
                exit 0
                ;;
            all|prepare|get|chroot|conf|build|clean)
                BUILD_STEP=$1
                shift
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done
    
    # Default to "all" if no step is specified
    if [ -z "$BUILD_STEP" ]; then
        BUILD_STEP="all"
    fi
}

# Clean previous build
clean_build() {
    log "INFO" "Cleaning previous build..."
    if [ -f "./99_cleanup.sh" ]; then
        log "INFO" "Running cleanup script..."
        ./99_cleanup.sh
        log "SUCCESS" "Cleanup completed"
    else
        log "ERROR" "Cleanup script not found: ./99_cleanup.sh"
        exit 1
    fi
}

# Check required scripts
check_scripts() {
    log "INFO" "Checking required scripts..."
    local missing=()
    
    local scripts=("00_prepare.sh" "01_get.sh" "02_chrootandinstall.sh" "03_conf.sh" "04_build.sh" "99_cleanup.sh")
    
    for script in "${scripts[@]}"; do
        if [ ! -f "./$script" ]; then
            missing+=("$script")
        elif [ ! -x "./$script" ]; then
            log "INFO" "Making $script executable"
            chmod +x "./$script"
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        log "ERROR" "Missing required scripts:"
        for script in "${missing[@]}"; do
            log "ERROR" "  - $script"
        done
        exit 1
    fi
    
    log "SUCCESS" "All required scripts are present and executable"
}

# Save build progress
save_progress() {
    local step=$1
    echo "$step" > .build_progress
    log "INFO" "Build progress saved: $step"
}

# Load build progress
load_progress() {
    if [ -f .build_progress ]; then
        local step=$(cat .build_progress)
        log "INFO" "Found saved build progress: $step"
        echo "$step"
    else
        log "INFO" "No saved build progress found"
        echo ""
    fi
}

# Generate module configuration environment variables
generate_module_env() {
    local env_vars=""
    
    # Set environment variables for each module
    env_vars+="export INCLUDE_ZFS=$INCLUDE_ZFS "
    env_vars+="export INCLUDE_BTRFS=$INCLUDE_BTRFS "
    env_vars+="export INCLUDE_RECOVERY_TOOLS=$INCLUDE_RECOVERY_TOOLS "
    env_vars+="export INCLUDE_NETWORK_TOOLS=$INCLUDE_NETWORK_TOOLS "
    env_vars+="export INCLUDE_CRYPTO=$INCLUDE_CRYPTO "
    env_vars+="export INCLUDE_TUI=$INCLUDE_TUI "
    env_vars+="export INCLUDE_MINIMAL_KERNEL=$INCLUDE_MINIMAL_KERNEL "
    env_vars+="export INCLUDE_COMPRESSION=$INCLUDE_COMPRESSION "
    env_vars+="export COMPRESSION_TOOL=$COMPRESSION_TOOL "
    
    echo "$env_vars"
}

# Execute a build step
execute_step() {
    local step=$1
    local script=""
    local sudo_req=false
    
    case $step in
        "prepare")
            script="./00_prepare.sh"
            sudo_req=true
            ;;
        "get")
            script="./01_get.sh"
            sudo_req=false
            ;;
        "chroot")
            script="./02_chrootandinstall.sh"
            sudo_req=true
            ;;
        "conf")
            script="./03_conf.sh"
            sudo_req=false
            ;;
        "build")
            script="./04_build.sh"
            sudo_req=false
            ;;
        "clean")
            script="./99_cleanup.sh"
            sudo_req=false
            ;;
        *)
            log "ERROR" "Unknown build step: $step"
            exit 1
            ;;
    esac
    
    # Check if script exists
    if [ ! -f "$script" ]; then
        log "ERROR" "Script not found: $script"
        exit 1
    fi
    
    # Add resume flag if required
    local args=""
    if [ "$RESUME" = true ]; then
        args="--resume"
    fi
    
    # Add verbose flag if required
    if [ "$VERBOSE" = true ]; then
        export VERBOSE=true
    fi
    
    # Export module configuration variables
    eval $(generate_module_env)
    
    # Show module configuration if verbose
    if [ "$VERBOSE" = true ]; then
        print_config
    fi
    
    # Execute the script
    log "INFO" "Executing build step: $step"
    log "INFO" "Running: $script $args"
    
    if [ "$sudo_req" = true ] && [ "$EUID" -ne 0 ]; then
        log "INFO" "This step requires elevated privileges"
        # Pass all environment variables to sudo
        sudo -E "$script" $args
    else
        "$script" $args
    fi
    
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log "ERROR" "Build step failed: $step (exit code: $exit_code)"
        exit $exit_code
    fi
    
    # Save progress
    save_progress "$step"
    log "SUCCESS" "Build step completed: $step"
}

# Main build function
run_build() {
    local start_step=""
    
    # If resume is requested, load saved progress
    if [ "$RESUME" = true ]; then
        start_step=$(load_progress)
    fi
    
    # If building "all", execute all steps in sequence
    if [ "$BUILD_STEP" = "all" ]; then
        # Determine where to start
        local steps=("prepare" "get" "chroot" "conf" "build")
        local start_idx=0
        
        if [ -n "$start_step" ]; then
            for i in "${!steps[@]}"; do
                if [ "${steps[$i]}" = "$start_step" ]; then
                    # Start from the next step
                    start_idx=$((i + 1))
                    break
                fi
            done
        fi
        
        # Execute all steps from the starting point
        if [ "$SKIP_PREPARE" = true ] && [ $start_idx -eq 0 ]; then
            start_idx=1
        fi
        
        for ((i=start_idx; i<${#steps[@]}; i++)); do
            execute_step "${steps[$i]}"
        done
    else
        # Execute only the specified step
        execute_step "$BUILD_STEP"
    fi
}

# Main function
main() {
    print_banner
    
    # Process command line arguments
    process_args "$@"
    
    # Display build configuration
    print_config
    
    # Check required scripts
    check_scripts
    
    # Clean build if requested
    if [ "$CLEAN_START" = true ]; then
        clean_build
    fi
    
    # Run the build
    run_build
    
    # Clean up after build if requested
    if [ "$CLEAN_END" = true ]; then
        clean_build
    fi
    
    # Print final message
    if [ "$BUILD_STEP" = "all" ]; then
        log "SUCCESS" "Build completed successfully!"
        if [ -f "../OneRecovery.efi" ]; then
            local file_size=$(du -h "../OneRecovery.efi" | cut -f1)
            log "SUCCESS" "Created OneRecovery.efi (Size: $file_size)"
            
            # Show included features
            log "INFO" "Included features:"
            [ "$INCLUDE_ZFS" = true ] && log "INFO" "  - ZFS filesystem support"
            [ "$INCLUDE_BTRFS" = true ] && log "INFO" "  - Btrfs filesystem support"
            [ "$INCLUDE_RECOVERY_TOOLS" = true ] && log "INFO" "  - Data recovery tools"
            [ "$INCLUDE_NETWORK_TOOLS" = true ] && log "INFO" "  - Network tools"
            [ "$INCLUDE_CRYPTO" = true ] && log "INFO" "  - Encryption support"
        fi
    else
        log "SUCCESS" "Build step '$BUILD_STEP' completed successfully!"
    fi
}

# Execute main with all command line arguments
main "$@"