services:
  onerecovery-builder:
    build:
      context: .
      dockerfile: Dockerfile
    image: onerecovery-builder-local:latest
    container_name: onerecovery-builder
    # Run as root by default in GitHub Actions
    user: ${RUN_AS_USER:-root}
    volumes:
      # Mount source code including all library scripts
      - ../build:/onerecovery/build:rw
      # Mount output directory
      - ../output:/onerecovery/output:rw
      # Mount persistent build cache
      - onerecovery-cache:/onerecovery/.buildcache
    environment:
      # Configure build arguments here (can be overridden with .env)
      - BUILD_ARGS=${BUILD_ARGS:-"--with-zfs --with-recovery-tools --with-network-tools --use-cache --make-verbose"}
      # Ensure feature variables propagate to all scripts
      - INCLUDE_ZFS=${INCLUDE_ZFS:-true}
      - INCLUDE_MINIMAL_KERNEL=${INCLUDE_MINIMAL_KERNEL:-false}
      - INCLUDE_NETWORK_TOOLS=${INCLUDE_NETWORK_TOOLS:-true}
      - INCLUDE_CRYPTO=${INCLUDE_CRYPTO:-true}
      # Configure user ID mapping (only used if not running as root)
      - HOST_UID=${HOST_UID:-1000}
      - HOST_GID=${HOST_GID:-1000}
      # Explicitly run as root in container
      - RUN_AS_ROOT=true
      # Build optimization
      - USE_CACHE=true
      - CCACHE_COMPRESS=true
      # Timing and performance logging
      - FINALIZE_TIMING_LOG=true
      - TIMING_LOG_FILE=/onerecovery/build/build_timing.log
      # Password settings
      - GENERATE_RANDOM_PASSWORD=${GENERATE_RANDOM_PASSWORD:-true}
      - ROOT_PASSWORD=${ROOT_PASSWORD:-""}
    # Resource limits (dynamically set by auto-resources.sh script)
    deploy:
      resources:
        limits:
          memory: ${DOCKER_MEMORY:-"4g"}
          cpus: ${DOCKER_CPUS:-2}
    # Enable any required capabilities
    cap_add:
      - SYS_ADMIN  # Required for chroot operations
    # Enable privileged mode for complex operations like loop devices
    privileged: true

volumes:
  onerecovery-cache:
    driver: local