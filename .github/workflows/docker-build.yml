name: Docker Build

on:
  push:
    branches: [ master, main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (minimal, standard, full)'
        required: true
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - full

jobs:
  # Job to determine which builds to run based on trigger type
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual triggers, only build the selected type
            echo "matrix={\"include\":[{\"name\":\"${{ github.event.inputs.build_type }}\",\"build_args\":\"${{ github.event.inputs.build_type == 'minimal' && '--minimal' || github.event.inputs.build_type == 'full' && '--full' || '--with-zfs --with-recovery-tools --with-network-tools' }} --compression-tool=upx\"}]}" >> $GITHUB_OUTPUT
          else
            # For automatic triggers, build all types with UPX compression
            echo "matrix={\"include\":[{\"name\":\"minimal\",\"build_args\":\"--minimal --compression-tool=upx\"},{\"name\":\"standard\",\"build_args\":\"--with-zfs --with-recovery-tools --with-network-tools --compression-tool=upx\"},{\"name\":\"full\",\"build_args\":\"--full --compression-tool=upx\"}]}" >> $GITHUB_OUTPUT
          fi

  # Build job using Docker with the same setup as local builds
  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
      fail-fast: false
    
    name: Build OneRecovery (${{ matrix.name }})
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc g++ make autoconf automake libtool libelf-dev upx-ucl unzip zstd xz-utils ccache uuid-dev libuuid1 libblkid-dev libtirpc-dev docker.io docker-compose
          
          # Create output directories with appropriate permissions
          mkdir -p build/output output
          sudo chmod -R 777 build output
          
          # Make all scripts executable
          chmod -R +x build/*.sh docker/*.sh
          find build/tools -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
      
      - name: Cache Alpine kernel configs
        uses: actions/cache@v4
        with:
          path: build/zfiles/kernel-configs
          key: alpine-kernel-config-${{ hashFiles('build/80_common.sh') }}
          restore-keys: |
            alpine-kernel-config-
      
      - name: Set up ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.name }}-
            ccache-${{ runner.os }}-

      # Create custom env file for GitHub Actions using the same docker-compose setup as local
      - name: Configure build environment
        run: |
          # Create .env file with GitHub-specific settings
          cat > docker/.env << EOF
          # GitHub Actions build environment
          # Generated at $(date)
          
          # Build arguments from matrix
          BUILD_ARGS=${{ matrix.build_args }}
          
          # Resource allocations appropriate for GitHub runners
          DOCKER_MEMORY=7g
          DOCKER_CPUS=2
          
          # User ID mapping
          HOST_UID=$(id -u)
          HOST_GID=$(id -g)
          
          # GitHub-specific settings
          GITHUB_ACTIONS=true
          
          # Debug settings
          DEBUG_FEATURE_FLAGS=true
          EOF
          
          # Create ccache directory with proper permissions
          mkdir -p ~/.ccache
          sudo chmod -R 777 ~/.ccache
          
          # Copy any existing kernel configs to the expected location
          mkdir -p build/zfiles/kernel-configs/features
          chmod -R 777 build/zfiles/kernel-configs

      # Run the build using the same docker-compose setup as local builds
      - name: Build OneRecovery using Docker
        env:
          BUILD_ARGS: ${{ matrix.build_args }}
        run: |
          cd docker
          
          # Show configuration
          echo "Building with arguments: $BUILD_ARGS"
          cat .env
          
          # Use the local docker-compose setup for builds
          docker-compose up --build
          
          # Check the exit code
          if [ $? -ne 0 ]; then
            echo "Docker build failed"
            docker-compose logs
            exit 1
          fi
          
          # Show output directory
          echo "Build output files:"
          ls -la ../output/
          
          # If we need to apply any GitHub-specific fixes to output files, do it here
          
      - name: Check for build artifacts
        id: check_files
        run: |
          # Check if build produced the EFI file
          if [ -f "./output/OneRecovery.efi" ]; then
            echo "efi_file=true" >> $GITHUB_OUTPUT
            du -h ./output/OneRecovery.efi
            
            # Display timing data if available
            if [ -f "./build/build_timing.log" ]; then
              echo "Build Timing Data:"
              cat ./build/build_timing.log
            fi
          else
            echo "efi_file=false" >> $GITHUB_OUTPUT
            echo "Build failed to produce OneRecovery.efi"
            exit 1
          fi
      
      - name: Upload build artifact
        if: steps.check_files.outputs.efi_file == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OneRecovery-${{ matrix.name }}
          path: ./output/OneRecovery.efi
          if-no-files-found: error
          
      - name: Upload build timing log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-timing-log-${{ matrix.name }}
          path: ./build/build_timing.log
          if-no-files-found: warn

  # Package artifacts section (unchanged)
  release:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Create release package
        run: |
          /bin/bash -c 'mkdir -p release
          # Only copy files that exist
          if [ -f "./artifacts/OneRecovery-minimal/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-minimal/OneRecovery.efi ./release/OneRecovery-minimal.efi
          fi
          if [ -f "./artifacts/OneRecovery-standard/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-standard/OneRecovery.efi ./release/OneRecovery-standard.efi
          fi
          if [ -f "./artifacts/OneRecovery-full/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-full/OneRecovery.efi ./release/OneRecovery-full.efi
          fi
          cd release
          zip -r OneRecovery-release.zip *.efi'
      
      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: OneRecovery-release
          path: ./release/OneRecovery-release.zip

  # Package all artifacts into a release
  release:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Create release package
        run: |
          /bin/bash -c 'mkdir -p release
          # Only copy files that exist
          if [ -f "./artifacts/OneRecovery-minimal/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-minimal/OneRecovery.efi ./release/OneRecovery-minimal.efi
          fi
          if [ -f "./artifacts/OneRecovery-standard/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-standard/OneRecovery.efi ./release/OneRecovery-standard.efi
          fi
          if [ -f "./artifacts/OneRecovery-full/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-full/OneRecovery.efi ./release/OneRecovery-full.efi
          fi
          cd release
          zip -r OneRecovery-release.zip *.efi'
      
      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: OneRecovery-release
          path: ./release/OneRecovery-release.zip