name: Docker Build

on:
  push:
    branches: [ master, main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (minimal, standard, full)'
        required: true
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - full

jobs:
  # Job to determine which builds to run based on trigger type
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual triggers, only build the selected type
            echo "matrix={\"include\":[{\"name\":\"${{ github.event.inputs.build_type }}\",\"build_args\":\"${{ github.event.inputs.build_type == 'minimal' && '--minimal' || github.event.inputs.build_type == 'full' && '--full' || '--with-zfs --with-recovery-tools --with-network-tools' }}\"}]}" >> $GITHUB_OUTPUT
          else
            # For automatic triggers, build all types
            echo "matrix={\"include\":[{\"name\":\"minimal\",\"build_args\":\"--minimal\"},{\"name\":\"standard\",\"build_args\":\"--with-zfs --with-recovery-tools --with-network-tools\"},{\"name\":\"full\",\"build_args\":\"--full\"}]}" >> $GITHUB_OUTPUT
          fi

  # Main build job
  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}

    name: Build OneRecovery (${{ matrix.name }})
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create build script
        run: |
          cat > build-github.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Create build directories
          mkdir -p build/alpine-minirootfs
          
          # Function to handle errors
          handle_error() {
            echo "::error::Build failed at step: $1"
            exit 1
          }
          
          # Step 1: Download Alpine
          echo "::group::Downloading Alpine"
          cd build
          wget http://dl-cdn.alpinelinux.org/alpine/v3.21/releases/x86_64/alpine-minirootfs-3.21.3-x86_64.tar.gz || handle_error "Alpine download"
          
          # Extract Alpine directly
          echo "Extracting Alpine..."
          sudo tar -xzf alpine-minirootfs-3.21.3-x86_64.tar.gz -C alpine-minirootfs || handle_error "Alpine extraction"
          sudo chown -R $(id -u):$(id -g) alpine-minirootfs
          echo "::endgroup::"
          
          # Step 2: Download Linux kernel
          echo "::group::Downloading Linux kernel"
          wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.12.19.tar.xz || handle_error "Kernel download"
          
          # Extract kernel
          echo "Extracting kernel..."
          mkdir -p linux-6.12.19
          sudo tar -xf linux-6.12.19.tar.xz --strip-components=1 -C linux-6.12.19 || handle_error "Kernel extraction"
          sudo chown -R $(id -u):$(id -g) linux-6.12.19
          ln -sf linux-6.12.19 linux
          echo "::endgroup::"
          
          # Step 3: Download ZFS if needed
          if [[ "$1" != "--minimal" ]]; then
            echo "::group::Downloading ZFS"
            wget https://github.com/openzfs/zfs/releases/download/zfs-2.3.0/zfs-2.3.0.tar.gz || handle_error "ZFS download"
            
            # Extract ZFS
            echo "Extracting ZFS..."
            mkdir -p zfs
            sudo tar -xzf zfs-2.3.0.tar.gz --strip-components=1 -C zfs || handle_error "ZFS extraction"
            sudo chown -R $(id -u):$(id -g) zfs
            echo "::endgroup::"
          fi
          
          # Step 4: Configure and build
          echo "::group::Building OneRecovery"
          cd ..
          sudo docker build -t onerecovery-builder ./docker
          
          # Copy scripts to fresh directory
          cp -r build build-clean
          
          # Run the build steps in the container
          sudo docker run --rm \
            --privileged \
            -v $(pwd)/build-clean:/onerecovery/build \
            -v $(pwd)/output:/onerecovery/output \
            -e BUILD_ARGS="$1" \
            onerecovery-builder || handle_error "Docker build"
          echo "::endgroup::"
          
          # Check result
          if [ -f "output/OneRecovery.efi" ]; then
            echo "Build completed successfully!"
            ls -lh output/
          else
            handle_error "OneRecovery.efi not found"
          fi
          EOF
          
          chmod +x build-github.sh

      - name: Build OneRecovery
        run: |
          sudo -E ./build-github.sh "${{ matrix.build_args }}"

      - name: Check for build artifacts
        id: check_files
        run: |
          if [ -f "./output/OneRecovery.efi" ]; then
            echo "efi_file=true" >> $GITHUB_OUTPUT
            du -h ./output/OneRecovery.efi
          else
            echo "efi_file=false" >> $GITHUB_OUTPUT
            echo "Build failed to produce OneRecovery.efi"
            exit 1
          fi

      - name: Upload build artifact
        if: steps.check_files.outputs.efi_file == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OneRecovery-${{ matrix.name }}
          path: ./output/OneRecovery.efi
          if-no-files-found: error

  # Package all artifacts into a release
  release:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release package
        run: |
          mkdir -p release
          # Only copy files that exist
          if [ -f "./artifacts/OneRecovery-minimal/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-minimal/OneRecovery.efi ./release/OneRecovery-minimal.efi
          fi
          if [ -f "./artifacts/OneRecovery-standard/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-standard/OneRecovery.efi ./release/OneRecovery-standard.efi
          fi
          if [ -f "./artifacts/OneRecovery-full/OneRecovery.efi" ]; then
            cp ./artifacts/OneRecovery-full/OneRecovery.efi ./release/OneRecovery-full.efi
          fi
          cd release
          zip -r OneRecovery-release.zip *.efi

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: OneRecovery-release
          path: ./release/OneRecovery-release.zip